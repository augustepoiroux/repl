{"sorries":
 [{"proofState": 0,
   "pos": {"line": 2, "column": 45},
   "goal": "x : Int\nh0 : x > 0\n⊢ False",
   "endPos": {"line": 2, "column": 50}}],
 "messages":
 [{"severity": "warning",
   "pos": {"line": 2, "column": 0},
   "endPos": {"line": 2, "column": 7},
   "data": "declaration uses 'sorry'"}],
 "env": 0}

{"proofStatus": "Incomplete: open goals remain",
 "proofState": 1,
 "goals": ["x : Int\nh0 h : x > 0\n⊢ False", "x : Int\nh0 : x > 0\n⊢ x > 0"]}

{"message":
 "Lean error:\ntype mismatch\n  h0\nhas type\n  x > 0 : Prop\nbut is expected to have type\n  False : Prop"}

{"message":
 "Lean error:\ntactic 'assumption' failed\nx : Int\nh0 h : x > 0\n⊢ False"}

{"message": "Lean error:\nsimp made no progress"}

{"proofStatus": "Incomplete: open goals remain",
 "proofState": 2,
 "messages":
 [{"severity": "error",
   "pos": {"line": 0, "column": 0},
   "endPos": {"line": 0, "column": 0},
   "data": "simp made no progress"}],
 "goals": ["x : Int\nh0 : x > 0\n⊢ x > 0", "x : Int\nh0 h : x > 0\n⊢ False"]}

{"proofStatus": "Incomplete: open goals remain",
 "proofState": 3,
 "messages":
 [{"severity": "error",
   "pos": {"line": 0, "column": 0},
   "endPos": {"line": 0, "column": 0},
   "data": "simp made no progress"}],
 "goals": ["x : Int\nh0 : x > 0\n⊢ x > 0", "x : Int\nh0 h : x > 0\n⊢ False"]}

{"proofStatus": "Incomplete: open goals remain",
 "proofState": 4,
 "messages":
 [{"severity": "error",
   "pos": {"line": 0, "column": 0},
   "endPos": {"line": 0, "column": 0},
   "data":
   "tactic 'rewrite' failed, did not find instance of the pattern in the target expression\n  x\nx : Int\nh0 h : x > 0\n⊢ False"}],
 "goals": ["x : Int\nh0 : x > 0\n⊢ x > 0", "x : Int\nh0 h : x > 0\n⊢ False"]}

{"proofStatus": "Incomplete: open goals remain",
 "proofState": 5,
 "messages":
 [{"severity": "error",
   "pos": {"line": 0, "column": 0},
   "endPos": {"line": 0, "column": 0},
   "data":
   "tactic 'rewrite' failed, did not find instance of the pattern in the target expression\n  x\nx : Int\nh0 h : x > 0\n⊢ False"}],
 "goals": ["x : Int\nh0 : x > 0\n⊢ x > 0", "x : Int\nh0 h : x > 0\n⊢ False"]}

